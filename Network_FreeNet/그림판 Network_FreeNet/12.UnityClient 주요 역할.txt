1. GameMain의 CGameMain.cs는 유니티 씬과 통신을 담당하는 CNetworkManager.cs를
연결시켜준다

2. NetworkManager의 CNetworkManager.cs는 시작시 CFreeNetUnityService.cs를
NetworkManager의 컴포넌트로 동적 포함시킨다
 2.1CFreeNetUnityService의 객체를 통해 연결/해제 이벤트 핸들러와 
    데이터 수신 이벤트 핸들러를 등록한다
 2.2 서버에 connect(서버의 address를 설정)
 2.3 서버에 send

3. CFreeNetUnityService.cs
 3.1 CFreeNetEventManager
     유니티 스크립트가 아닌 일반 C# 클래스
     new 로 객체 생성
 3.2 IPeer
 3.3 CNetworkService

4. CFreeNetEventManager.cs
 내부에 이벤트를 저장하는 Queue와 패킷을 저장하는 Queue를 가지고 있다
 FreeNet.dll로 부터는 이벤트/패킷을 큐에 저장
 CFreeNetUnityService.cs의 Update()에서는 이벤트/패킷을 큐에서 꺼내는 기능을 제공한다

5. CNetworkService 객체와 CConnector 객체로 서버에 접속
 CConnector객체에 접속 성공시 호출되는 이벤트 핸드러인
 on_connected_gameserver를 등록

6. on_connected_gameserver가 호출되는 순간(서버에 접속시)
 IPeer를 상속받은 CRemteServerPeer객체를 생성한다
 CRemoteServerPeer 생성자에는 FreeNet.dll이 연결시 제공하는
 CUserToken객체(내부에 소켓을 보유)를 전달한다

7. CRemoteServerPeer는 CUserToken객체와 CFreeNetEventManager객체를 참조하고 있다
 CUserToken으로부터 통신관련 이벤트/메세지를 받아서
 CFreeNetEventManager객체의 Queue에 저장하는 기능을 담당한다

8. CRemoteServerPeer의 IPeer.on_message는 FreeNet.dll 내부의
 닷넷의 쓰레드에 의해 호출된다
 그런데 이 쓰레드에서 Unity의 함수를 호출하거나
 Unity씬 컨트롤에 접근하면 오류가 발생하거나 제대로 표시가 안될 가능성이 매우 높다
 그래서 이럴 때는 Queue를 사용해서 처리한다